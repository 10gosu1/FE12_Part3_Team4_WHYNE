import { AxiosError } from "axios";
import apiClient from "./api";

// ‚úÖ ÌöåÏõêÍ∞ÄÏûÖ
export const signUp = async (
  email: string,
  nickname: string,
  password: string,
  passwordConfirmation: string
) => {
  try {
    const response = await apiClient.post(
      "/auth/signUp",
      {
        email,
        nickname,
        password,
        passwordConfirmation,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        withCredentials: false, // ‚úÖ CORS Î¨∏Ï†ú Î∞©ÏßÄ
      }
    );
    console.log("‚úÖ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ:", response.data);

    const loginResponse = await signIn(email, password);
    console.log("‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌõÑ ÌÜ†ÌÅ∞ Ï†ÄÏû•:", loginResponse);

    return loginResponse;
  } catch (error) {
    if (error instanceof AxiosError) {
      console.error("‚ùå ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®:", error.response?.data || error);
    } else {
      console.error("‚ùå ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®: Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò");
    }
    throw error;
  }
};

// ‚úÖ Î°úÍ∑∏Ïù∏
export const signIn = async (email: string, password: string) => {
  try {
    const response = await apiClient.post("/auth/signIn", { email, password });

    const { accessToken, refreshToken } = response.data;

    console.log("üõ† Î°úÍ∑∏Ïù∏ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", response.data);
    console.log("üõ† Ï†ÄÏû•Ìï† accessToken:", accessToken);

    localStorage.setItem("email", email);
    localStorage.setItem("access_token", accessToken);
    localStorage.setItem("refresh_token", refreshToken);

    console.log("‚úÖ ÌÜ†ÌÅ∞Ïù¥ Ï†ÄÏû•Îê®! localStorage ÌôïÏù∏ ÌïÑÏöî");

    return response.data;
  } catch (error) {
    console.error("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®:", error);
    throw error;
  }
};

// ‚úÖ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Í∞±Ïã†
export const refreshAccessToken = async () => {
  try {
    const refreshToken = localStorage.getItem("refresh_token");
    if (!refreshToken) throw new Error("Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.");

    const response = await apiClient.post("/auth/refresh-token", {
      refreshToken,
    });

    const { accessToken } = response.data;

    localStorage.setItem("access_token", accessToken);

    console.log("ÌÜ†ÌÅ∞ Í∞±Ïã† ÏÑ±Í≥µ! ÏÉàÎ°úÏö¥ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞:", accessToken);
    return accessToken;
  } catch (error) {
    console.error("ÌÜ†ÌÅ∞ Í∞±Ïã† Ïã§Ìå®:", error);
    throw error;
  }
};

// ‚úÖ Ïπ¥Ïπ¥Ïò§ ÏÜåÏÖú Î°úÍ∑∏Ïù∏
export const socialSignIn = async (code: string) => {
  try {
    const redirectUri = process.env.NEXT_PUBLIC_KAKAO_REDIRECT_URI!;

    const response = await apiClient.post(`/auth/signIn/KAKAO`, {
      redirectUri,
      token: code,
    });

    const { accessToken, refreshToken } = response.data;

    localStorage.setItem("access_token", accessToken);
    localStorage.setItem("refresh_token", refreshToken);

    return response.data;
  } catch (error) {
    console.error(`Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ïã§Ìå®:`, error.response?.data || error.message);
    throw error;
  }
};
